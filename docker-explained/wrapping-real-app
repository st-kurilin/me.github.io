<!DOCTYPE html>
<html lang="en">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="msapplication-tap-highlight" content="no">
    <meta name="description" content="gotostan.com">
    <title>Wrapping Real App</title>
</head>

<body>

<div class="nav">
    <div onclick="window.location.href='../index.html'" style="cursor: pointer">
        goto stan;
    </div>
</div>

<div class="content">
    <section>
<h1>Wrapping Real App</h1>
<h2>We've learned how to run trivial docker container. Now let's run node.js app that is more real example.You can easily apply same princeples to apps written in other programming languages.</h2>
<ul><li>Part 1:	<a href='./hello-docker'>Hello Docker</a></li><li>Part 2:	Wrapping Real App</li><li>Part 3:	<a href='./running-stack'>Running Stack</a></li></ul>
</section>


<section>
    <h3>App</h3>
    Our application will serve as a proxy to another applications.
    To do that we will have to know where other application located.
    Also we will write logs to some configurable location.

    Let's start with an <code lang='language-bash'<pre>app.js</pre></code>
<pre><code class='language-javascript'>
const express = require('express');
const request = require('request');
const fs = require('fs');

const app = express();
app.get('/', (req, res) => {
    const targetUrl = Math.random() >= 0.5 ? process.env.TARGET1 : process.env.TARGET2;
    fs.appendFile("/mnt/data/logs.txt", "Chosen target: " + targetUrl + "\n");
    request(targetUrl || "", (error, resp, body) => {
        res.send('Target says: ' + body + "\n");
    });
});


app.listen(80, '0.0.0.0');
</code></pre>


    <code lang='language-bash'<pre>process.env.LOGS</pre></code> is the way to access environment variable. Using <code lang='language-bash'<pre>||</pre></code> construction we can provide default value.    So <code lang='language-bash'<pre>process.env.LOGS || 'logs.txt'</pre></code> means: if presented use destination provided by environment variable <code lang='language-bash'<pre>LOGS</pre></code>, use    <code lang='language-bash'<pre>'logs.txt'</pre></code> otherwise.    You can also notice that our app has now dependency on express library. It will need to be installed during
    packaging.
    We will specify with libraries to install in <code lang='language-bash'<pre>package.json</pre></code> file
<pre><code class='language-bash'>
{
  "dependencies": {
    "express": "latest",
    "request": "latest"
  }
}
</code></pre>

</section>

<section>
    <h3>Wrapping</h3>
    When app is ready we need to wrap it to Docker image. This time <code lang='language-bash'<pre>Dockerfile</pre></code> will have some additional lines.

<pre><code class='language-bash'>
#node:8 provides npm support out of the box
FROM node:8

#specify with files should go into imgage
WORKDIR /app
COPY app.js ./
COPY package.json ./

#executed on image build. install libraries
RUN npm install

EXPOSE 80

#executed on container run
CMD [ "node", "app.js" ]
</code></pre>


    If you would prefer to optimize image size you can use <code lang='language-bash'<pre>alpine</pre></code> here as well, but you will to install <code lang='language-bash'<pre>npm</pre></code> with    <code lang='language-bash'<pre>RUN</pre></code>.</section>

<section>
    <h3>Building Image</h3>
    You can build image in exactly same way <code lang='language-bash'<pre>docker build -t nodeproxy .</pre></code>.    In next article we will see how we can specify environment variables and write logs to real file system.
</section>
<section><h3>Content</h3><ul><li>Part 1:	<a href='./hello-docker'>Hello Docker</a></li><li>Part 2:	Wrapping Real App</li><li><strong>Next:</strong> 	Part 3:	<a href='./running-stack'>Running Stack</a></li></ul>
</section>
</div>
<div class="footer">
    <div>
        Stanislav Kurilin. Let's get in touch via stan@gotostan.com
    </div>
</div>
<style type="text/css" media="screen">
    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        background-color: #bebebe;
    }
    body div {
        display: flex;
        flex-wrap: wrap;
    }
    .nav, .footer {
        width: 100%;
        height: 72px;
        background-color: #202124;
        color: white;
        font-size: 16px;
        font-family: "Roboto Mono", monospace;
        align-items: center;
        padding-left: 16px;
        padding-right: 16px;
    }
    .nav div, .footer div {
        width: 800px;
        margin: auto;
    }
    .nav {
        margin-bottom: 16px;
    }
    .footer {
        margin-top: 16px;
    }
    .content {
        font-family: 'Roboto', sans-serif;
        max-width: 800px;
        margin-left: auto; margin-right: auto;
    }

    section {
        width: 100%;
        overflow: scroll;
        padding: 16px;
        margin-bottom: 16px;
        top: 16px;
        border-radius: 4px;
        background-color: white;

        box-shadow:
                0px 1px 3px 0px rgba(0, 0, 0, 0.2),
                0px 1px 1px 0px rgba(0, 0, 0, 0.14),
                0px 2px 1px -1px rgba(0, 0, 0, 0.12);
    }

    section h1 {
        font-size: 3.75rem;
        font-weight: 300;
        line-height: 1;
        letter-spacing: -0.00833em;
    }
    section h2 {
        color: rgb(95, 99, 104);
        font-size: 20px;
        line-height: 1.6;
        font-weight: normal;
    }
    section h3 {
        font-size: 2.125rem;
        font-weight: 400;
        line-height: 1.17;
        letter-spacing: 0.00735em;
    }
</style>
<link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/themes/prism.min.css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.15.0/prism.min.js" />
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>





<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-99689979-6"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());

    gtag('config', 'UA-99689979-6');
</script>

</body>
</html>